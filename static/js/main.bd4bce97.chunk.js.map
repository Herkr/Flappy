{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","GridCell","props","style","width","height","border","backgroundColor","cell","react_default","a","createElement","GridRow","display","row","map","Grid","grid","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","i","push","Array","fill","bird","position","state","towers","upright","crashed","score","timerID","setInterval","gridCopy","towersCopy","slice","length","Math","floor","random","j","birdCopy","setState","onClick","handleClick","bind","restart","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.bd4bce97.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction GridCell(props){\n  var style = {\n    width: 20,\n    height: 20,\n    border: '1px solid black',\n    backgroundColor: props.cell\n  }\n  return (\n    <div style = {style}>\n      \n    </div>\n  )\n}\n\nfunction GridRow(props){\n  var style = {\n    display: \"flex\"\n  }\n  return (\n    <div style = {style}>\n      {\n        props.row.map( (cell) => {\n          return <GridCell cell = {cell}/>\n        })\n      }\n    </div>\n  )\n}\n\nfunction Grid(props){\n  return(\n    <div>\n      {\n        props.grid.map( (row) => {\n          return <GridRow row = {row}/>\n        })\n      }\n    </div>\n  )\n}\n\nclass Game extends React.Component{\n  constructor(props){\n    super(props)\n\n    var grid = []\n    for(let i=0; i<20; i++)\n    {\n      grid.push(new Array(30).fill('red'))\n    }\n    var bird = {\n      height: 10,\n      position: 2\n    }\n    var towers = [\n      {position:3, height:5, upright:true},\n      {position:7, height:8, upright:false},\n      {position:10, height:7, upright:true},\n      {position:14, height:6, upright:false},\n      {position:18, height:7, upright:true},\n      {position:22, height:3, upright:false},\n      {position:26, height:8, upright:true},\n      {position:29, height:2, upright:false}\n    ]\n    grid[bird.height][bird.position] = 'yellow'\n\n    this.state = {grid:grid, bird:bird, towers:towers, crashed:false, score:0}\n\n    this.timerID = setInterval(() => {\n      if(this.state.crashed)\n        return\n      var gridCopy = []\n      var towersCopy = this.state.towers.slice()\n      for(let i=0; i<20; i++)\n      {\n        gridCopy.push(new Array(30).fill('red'))\n      }\n\n      for(let i=0; i < towersCopy.length; i++)\n      {\n        towersCopy[i].position--\n        if(towersCopy[i].position < 0)\n        {\n          towersCopy[i].position = 29\n          towersCopy[i].height = Math.floor(Math.random()*7) + 3\n        }\n      }\n\n      for(let i=0; i<towersCopy.length; i++)\n      {\n        for(let j=0; j<towersCopy[i].height; j++)\n        {\n          if(towersCopy[i].upright)\n          gridCopy[19-j][towersCopy[i].position] = 'blue'\n          else\n          gridCopy[j][towersCopy[i].position] = 'blue'\n        }\n      }\n      var birdCopy = this.state.bird\n      birdCopy.height++\n\n      var crashed = false\n      //bird goes up again when it touches ground/roof\n      if(birdCopy.height > 19 || birdCopy.height < 0){\n        birdCopy.height = 10\n        crashed = true\n      }\n      // collision\n      for(let i=0; i<20; i++)\n      {\n        if(gridCopy[i][2] == 'blue' && birdCopy.height == i){\n          birdCopy.height = 10\n          crashed = true\n        }\n      }\n      if(crashed){\n        this.setState({crashed:true})\n      }\n      gridCopy[birdCopy.height][birdCopy.position] = 'yellow'\n\n\n      this.setState({grid:gridCopy, bird:birdCopy, towers:towersCopy, score:this.state.score + 1})\n\n    }, 200) \n  }\n  handleClick(){\n    if(this.state.crashed)\n      return\n    var birdCopy = this.state.bird\n    birdCopy.height-= 3\n    this.setState({bird:birdCopy})\n  }\n  restart(){\n    this.setState({crashed:false, score:0})\n  }\n  render(){\n    return( \n      <div onClick = {this.handleClick.bind(this)}>\n        <Grid grid = {this.state.grid}/>\n        {this.state.crashed? <button onClick = {this.restart.bind(this)}>Click here to restart the game...</button> : this.state.score}\n      </div>\n    )\n  }\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}